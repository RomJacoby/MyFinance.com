{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Rom\\\\Project\\\\app\\\\react-frontend\\\\src\\\\Components\\\\StockList.js\";\nimport axios from \"axios\";\nimport React, { Component } from 'react';\nimport { Card, CardDeck } from \"react-bootstrap\";\nimport Plot from 'react-plotly.js';\nexport default class StockList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stocks: []\n    };\n  }\n\n  //Pushing response stocks (as strings) to this.state.stocks, then calling a function to parse and arrange everything\n  componentDidMount() {\n    axios.get('http://localhost:5000/get_all_stocks').then(res => {\n      var stocks_arr = [];\n      Object.keys(res.data).forEach(k => {\n        stocks_arr.push({\n          data: res.data[k]\n        });\n      });\n      this.setState({\n        stocks: stocks_arr\n      });\n      this.update_state();\n    });\n  } //This function is using my response from backend in order to update all state values\n\n\n  update_state() {\n    this.setState(state => {\n      //this is the final array, which this.state.stocks will be equal to.\n      var stocksArr = []; //Looping over the strings in order to parse them\n\n      state.stocks.forEach(stock => {\n        var datesArr = [];\n        var valuesArr = [];\n        var stockName = \"\";\n        var str = String(stock.data);\n        var responseArr = str.split(\",\");\n        var isDate = true; //Looping over and Fetching data from responseArr, manipulates it, and updates datesArr,valuesArr and stockName \n\n        for (var i = 0; i < responseArr.length; i++) {\n          if (i == 0) {\n            stockName = responseArr[i];\n          } else if (responseArr[i] === \"NowValues\") {\n            isDate = false;\n          } else if (isDate == true) {\n            var parts = String(responseArr[i]).split('/');\n            var date = new Date(parts[0], parts[1] - 1, parts[2]);\n            datesArr.push(date);\n          } else if (isDate == false) {\n            valuesArr.push(responseArr[i]);\n          }\n        } //pushing each stock's details to stocksArr\n\n\n        stocksArr.push({\n          \"datesArr\": datesArr,\n          \"valuesArr\": valuesArr,\n          \"stockName\": stockName\n        });\n      }); //returning new state \n\n      return {\n        stocks: stocksArr\n      };\n    });\n  }\n\n  create_body() {\n    var body = \"\";\n    var colorArr = [\"#B22222\", \"#20B2AA\", \"#FFA500\", \"#87CEEB\", \"#483D8B\", \"#000000\", \"#556B2F\"]; //Looping over this.state.stocks, creating and returning the Plots' HTML\n\n    return body = this.state.stocks.map(stock => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        border: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        style: {\n          textAlign: \"Center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"material-icons\",\n        style: {\n          fontSize: \"1.5em\",\n          position: \"absolute\",\n          left: \"9%\",\n          top: \"3%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 66\n        }\n      }, \"edit\"), stock.stockName), /*#__PURE__*/React.createElement(Plot, {\n        data: [{\n          x: stock.datesArr,\n          y: stock.valuesArr,\n          fill: \"tonexty\",\n          type: 'line',\n          line: {\n            color: this.getRandomColor(colorArr)\n          }\n        }],\n        layout: {\n          plot_bgcolor: '#FAF0E6',\n          margin: {\n            l: \"30\",\n            r: \"30\",\n            t: \"5\",\n            b: \"30\"\n          },\n          width: 496,\n          height: 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }\n      }))));\n    });\n  } //Fetches a color from the color array and then poping the color out of it\n\n\n  getRandomColor(colorArr) {\n    var i = Math.floor(Math.random() * colorArr.length);\n    var randomColor = colorArr[i];\n    colorArr.splice(i, 1);\n    return randomColor;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\",\n        fontStyle: \"oblique\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, \"Stocks\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\",\n        fontStyle: \"italic\",\n        fontFamily: \"sans-serif\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, \"Your money, our pleasure.\"), /*#__PURE__*/React.createElement(CardDeck, {\n      style: {\n        margin: \"5%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, this.create_body()));\n  }\n\n}","map":{"version":3,"sources":["C:/Program Files/Rom/Project/app/react-frontend/src/Components/StockList.js"],"names":["axios","React","Component","Card","CardDeck","Plot","StockList","constructor","state","stocks","componentDidMount","get","then","res","stocks_arr","Object","keys","data","forEach","k","push","setState","update_state","stocksArr","stock","datesArr","valuesArr","stockName","str","String","responseArr","split","isDate","i","length","parts","date","Date","create_body","body","colorArr","map","textAlign","fontSize","position","left","top","x","y","fill","type","line","color","getRandomColor","plot_bgcolor","margin","l","r","t","b","width","height","Math","floor","random","randomColor","splice","render","fontStyle","fontFamily"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport React, {Component} from 'react'\r\nimport { Card,CardDeck } from \"react-bootstrap\";\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default class StockList extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            stocks:[]\r\n        }\r\n    };\r\n\r\n    //Pushing response stocks (as strings) to this.state.stocks, then calling a function to parse and arrange everything\r\n    componentDidMount(){\r\n        axios.get('http://localhost:5000/get_all_stocks')\r\n        .then( res => {\r\n            var stocks_arr = []\r\n            Object.keys(res.data).forEach(k => {\r\n                stocks_arr.push({data:res.data[k]})\r\n            })\r\n            this.setState({stocks:stocks_arr})\r\n            this.update_state()\r\n        })       \r\n    }\r\n\r\n    //This function is using my response from backend in order to update all state values\r\n    update_state(){\r\n        this.setState(state => {  \r\n            \r\n            //this is the final array, which this.state.stocks will be equal to.\r\n            var stocksArr = []\r\n            \r\n            //Looping over the strings in order to parse them\r\n            state.stocks.forEach( stock => {\r\n                var datesArr = []\r\n                var valuesArr = []\r\n                var stockName = \"\"\r\n                \r\n                var str = String(stock.data)\r\n                var responseArr = str.split(\",\")\r\n                var isDate = true\r\n                \r\n                //Looping over and Fetching data from responseArr, manipulates it, and updates datesArr,valuesArr and stockName \r\n                for (var i=0;i<responseArr.length;i++){\r\n                    if (i == 0){stockName = responseArr[i]}\r\n                    else if ( responseArr[i] === \"NowValues\" ){ isDate = false }   \r\n                    else if ( isDate == true )\r\n                    {\r\n                        var parts = String(responseArr[i]).split('/');\r\n                        var date = new Date(parts[0],parts[1] - 1,parts[2]);\r\n                        datesArr.push(date)\r\n                    }\r\n                    else if (isDate == false)\r\n                    { \r\n                        valuesArr.push(responseArr[i])\r\n                    }\r\n                }\r\n                //pushing each stock's details to stocksArr\r\n                stocksArr.push({\"datesArr\":datesArr,\"valuesArr\":valuesArr,\"stockName\":stockName})\r\n            })\r\n            //returning new state \r\n            return {stocks:stocksArr}\r\n        })\r\n    }\r\n    \r\n    create_body(){\r\n        var body = \"\"\r\n        var colorArr = [\"#B22222\",\"#20B2AA\",\"#FFA500\",\"#87CEEB\",\"#483D8B\",\"#000000\",\"#556B2F\"]\r\n        //Looping over this.state.stocks, creating and returning the Plots' HTML\r\n        return body = this.state.stocks.map( stock => {\r\n            return(\r\n                <div ><Card border=\"secondary\">\r\n                    <Card.Body>\r\n                        <Card.Title style={{textAlign:\"Center\"}}><i className=\"material-icons\" style={{fontSize:\"1.5em\",position:\"absolute\",left:\"9%\",top:\"3%\"}}>edit</i>{stock.stockName}</Card.Title>\r\n                        <Plot\r\n                            data={[\r\n                            {\r\n                                x: stock.datesArr,\r\n                                y: stock.valuesArr,\r\n                                fill: \"tonexty\",\r\n                                type: 'line',\r\n                                line:{color:this.getRandomColor(colorArr)}    \r\n                            }\r\n                            ]}\r\n                            layout={ {plot_bgcolor:'#FAF0E6',margin:{l:\"30\",r :\"30\",t:\"5\",b:\"30\"},width:496,height:400}}/>\r\n                    </Card.Body>   \r\n                </Card></div>\r\n            )\r\n        })\r\n    }\r\n    //Fetches a color from the color array and then poping the color out of it\r\n    getRandomColor(colorArr) {\r\n        var i = Math.floor(Math.random()*colorArr.length)\r\n        var randomColor = colorArr[i];\r\n        colorArr.splice(i,1)\r\n        return randomColor;\r\n    }\r\n\r\n    render(){ \r\n        return (<div>\r\n                    <h1 style={{textAlign:\"center\",fontStyle:\"oblique\"}}>Stocks</h1>\r\n                    <br/>\r\n                    <h3 style={{textAlign:\"center\",fontStyle:\"italic\",fontFamily:\"sans-serif\"}}>Your money, our pleasure.</h3>\r\n                    <CardDeck style={{margin:\"5%\"}}>{this.create_body()}</CardDeck>\r\n                </div>)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}