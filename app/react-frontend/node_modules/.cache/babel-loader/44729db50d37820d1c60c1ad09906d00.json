{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Rom\\\\Project\\\\app\\\\react-frontend\\\\src\\\\Components\\\\StockList.js\";\nimport axios from \"axios\";\nimport React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nexport default class StockList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stocks: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/get_all_stocks').then(res => {\n      var stocks_arr = [];\n\n      for (var key in res.data) stocks_arr.push(res.data[key]);\n\n      this.setState({\n        stocks: stocks_arr\n      });\n    });\n  }\n\n  create_plot(stock) {\n    var str = stock;\n    var stockName = \"\";\n    var datesArr = [];\n    var valuesArr = [];\n    var arr = str.split(\",\");\n    var i = 0;\n    var isDate = true;\n\n    for (i = 0; i < arr.length; i++) {\n      if (i == 0) {\n        stockName = arr[0];\n      } else if (arr[i] === \"NowValues\") {\n        isDate = false;\n      } else if (isDate == true) {\n        datesArr.push(arr[i]);\n      } else if (isDate == false) {\n        valuesArr.push(arr[i]);\n      }\n    }\n\n    var i = 0;\n    datesArr.forEach(date => {\n      var parts = date.split('/');\n      var newDate = new Date(parts[0], parts[1] - 1, parts[2]);\n      datesArr[i] = newDate;\n      i++;\n    });\n    return /*#__PURE__*/React.createElement(Plot, {\n      data: [{\n        x: datesArr,\n        y: valuesArr,\n        type: 'line'\n      }],\n      layout: {\n        title: stockName\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    });\n  }\n\n  render() {\n    var stock_list = this.state.stocks;\n    var body = \"\";\n    stock_list.forEach(stock => {\n      body += this.create_plot(stock);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, body);\n  }\n\n}","map":{"version":3,"sources":["C:/Program Files/Rom/Project/app/react-frontend/src/Components/StockList.js"],"names":["axios","React","Component","Plot","StockList","constructor","state","stocks","componentDidMount","get","then","res","stocks_arr","key","data","push","setState","create_plot","stock","str","stockName","datesArr","valuesArr","arr","split","i","isDate","length","forEach","date","parts","newDate","Date","x","y","type","title","render","stock_list","body"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport React, {Component} from 'react'\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default class StockList extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            stocks:[]\r\n        }\r\n    };\r\n\r\n    componentDidMount(){\r\n        axios.get('http://localhost:5000/get_all_stocks')\r\n        .then( res => {\r\n            var stocks_arr = []\r\n            for (var key in res.data)\r\n                stocks_arr.push(res.data[key])\r\n            this.setState({stocks:stocks_arr})\r\n        } )\r\n    }\r\n    \r\n    create_plot(stock){\r\n        var str = stock\r\n        var stockName = \"\"\r\n        var datesArr = []\r\n        var valuesArr = []\r\n        var arr = str.split(\",\")\r\n        var i = 0\r\n        var isDate = true\r\n        for (i=0;i<arr.length;i++){\r\n            \r\n            if (i == 0){ stockName = arr[0] }\r\n            else if (arr[i] === \"NowValues\"){ isDate = false }   \r\n            else if (isDate == true) { datesArr.push(arr[i]) }\r\n            else if (isDate == false){ valuesArr.push(arr[i]) }\r\n        }\r\n        \r\n        var i = 0\r\n        datesArr.forEach(date => { \r\n            var parts = date.split('/');\r\n            var newDate = new Date(parts[0],parts[1] - 1,parts[2]);\r\n            datesArr[i] = newDate;\r\n            i++;\r\n        });\r\n        \r\n        return(\r\n              <Plot\r\n                data={[\r\n                {\r\n                    x: datesArr,\r\n                    y: valuesArr,\r\n                    type: 'line'\r\n                }\r\n                ]}\r\n                layout={ {title: stockName} }\r\n              /> \r\n        )\r\n    }\r\n    \r\n    render(){\r\n        var stock_list = this.state.stocks\r\n        var body = \"\"\r\n        stock_list.forEach(stock => {\r\n            body += this.create_plot(stock)\r\n        });\r\n        return (<div>{body}</div>)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}