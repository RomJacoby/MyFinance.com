{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Rom\\\\Project\\\\app\\\\react-frontend\\\\src\\\\Components\\\\StockList.js\";\nimport axios from \"axios\";\nimport React, { Component } from 'react';\nimport { Card, CardDeck } from \"react-bootstrap\";\nimport Plot from 'react-plotly.js';\nexport default class StockList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stocks: [],\n      colorArr: [\"#B22222\", \"#20B2AA\", \"#FFA500\", \"#87CEEB\", \"#483D8B\", \"#000000\", \"#556B2F\"],\n      datesArr: [],\n      valuesArr: [],\n      stockName: \"\",\n      body: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/get_all_stocks').then(res => {\n      var stocks_arr = [];\n      Object.keys(res.data).forEach(k => {\n        stocks_arr.push(res.data[k]);\n      });\n      this.setState({\n        stocks: stocks_arr\n      });\n    });\n    this.setState({\n      body: this.create_body()\n    });\n    console.log(this.state.body[0]);\n  }\n\n  create_body() {\n    var body = \"\";\n    return body = this.state.stocks.map(stock => {\n      var str = String(stock);\n      var responseArr = str.split(\",\");\n      var i = 0;\n      var isDate = true;\n\n      for (i = 0; i < responseArr.length; i++) {\n        if (i == 0) {\n          this.setState({\n            stockName: responseArr[i]\n          });\n        } else if (responseArr[i] === \"NowValues\") {\n          isDate = false;\n        } else if (isDate == true) {\n          this.setState(state => {\n            state.datesArr.push(responseArr[i]);\n            return {\n              datesArr: state.datesArr\n            };\n          });\n        } else if (isDate == false) {\n          this.setState(state => {\n            state.valuesArr.push(responseArr[i]);\n            return {\n              valuesArr: state.valuesArr\n            };\n          });\n        }\n      }\n\n      var i = 0;\n      var datesArr2 = this.state.datesArr;\n      datesArr2.forEach(date => {\n        var parts = String(date).split('/');\n        datesArr2[i] = new Date(parts[0], parts[1] - 1, parts[2]);\n        i++;\n      });\n      this.setState({\n        datesArr: datesArr2\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        border: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 48\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        style: {\n          textAlign: \"Center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 59\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"material-icons\",\n        style: {\n          fontSize: \"1.5em\",\n          position: \"absolute\",\n          left: \"9%\",\n          top: \"3%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 100\n        }\n      }, \"edit\"), this.state.stockName), /*#__PURE__*/React.createElement(Plot, {\n        data: [{\n          x: this.state.datesArr,\n          y: this.state.valuesArr,\n          fill: \"tonexty\",\n          type: 'line',\n          line: {\n            color: this.getRandomColor()\n          }\n        }],\n        layout: {\n          plot_bgcolor: '#FAF0E6',\n          margin: {\n            l: \"30\",\n            r: \"30\",\n            t: \"5\",\n            b: \"30\"\n          },\n          width: 496,\n          height: 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 239\n        }\n      }))));\n    });\n  }\n\n  getRandomColor() {\n    var i = Math.floor(Math.random() * this.state.colorArr.length);\n    var randomColor = this.state.colorArr[i];\n    this.setState(state => {\n      state.colorArr.splice(i, 1);\n      return {\n        colorArr: state.colorArr\n      };\n    });\n    return randomColor;\n  }\n  /*create_body(){\r\n      var body = []\r\n      return body = this.state.stocks.map( stock => {\r\n          var str = String(stock)\r\n          var responseArr = str.split(\",\")\r\n          var i = 0\r\n          var isDate = true\r\n          \r\n          for (i=0;i<responseArr.length;i++){\r\n              if (i == 0){this.setState({stockName:responseArr[i]})}\r\n              else if ( responseArr[i] === \"NowValues\" ){ isDate = false }   \r\n              else if ( isDate == true )\r\n              {\r\n                  this.setState((state) => {\r\n                      state.datesArr.push(responseArr[i])\r\n                      return {datesArr:state.datesArr} \r\n                  })\r\n              }\r\n              else if (isDate == false)\r\n              {\r\n                  this.setState((state) => {\r\n                      state.valuesArr.push(responseArr[i])\r\n                      return {valuesArr:state.valuesArr} \r\n                  })\r\n              }\r\n          }\r\n          \r\n          var i = 0\r\n          var datesArr2 = this.state.datesArr\r\n          datesArr2.forEach(date => { \r\n              var parts = String(date).split('/');\r\n              datesArr2[i] = new Date(parts[0],parts[1] - 1,parts[2]);\r\n              i++;\r\n          });\r\n          this.setState({datesArr:datesArr2})\r\n          return(\r\n              <div ><Card border=\"secondary\"><Card.Body><Card.Title style={{textAlign:\"Center\"}}><i className=\"material-icons\" style={{fontSize:\"1.5em\",position:\"absolute\",left:\"9%\",top:\"3%\"}}>edit</i>{this.state.stockName}</Card.Title><Plot\r\n                  data={[\r\n                  {\r\n                      x: this.state.datesArr,\r\n                      y: this.state.valuesArr,\r\n                      fill: \"tonexty\",\r\n                      type: 'line',\r\n                      line:{color:this.getRandomColor()}\r\n                      \r\n                  }\r\n                  ]}\r\n                  layout={ {plot_bgcolor:'#FAF0E6',margin:{l:\"30\",r :\"30\",t:\"5\",b:\"30\"},width:496,height:400}}/>\r\n                  </Card.Body></Card>\r\n              </div>\r\n          )\r\n      })\r\n  }*/\n\n\n  render() {\n    console.log(this.state.body);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardDeck, {\n      style: {\n        margin: \"5%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 22\n      }\n    }, this.state.body));\n  }\n\n}","map":{"version":3,"sources":["C:/Program Files/Rom/Project/app/react-frontend/src/Components/StockList.js"],"names":["axios","React","Component","Card","CardDeck","Plot","StockList","constructor","state","stocks","colorArr","datesArr","valuesArr","stockName","body","componentDidMount","get","then","res","stocks_arr","Object","keys","data","forEach","k","push","setState","create_body","console","log","map","stock","str","String","responseArr","split","i","isDate","length","datesArr2","date","parts","Date","textAlign","fontSize","position","left","top","x","y","fill","type","line","color","getRandomColor","plot_bgcolor","margin","l","r","t","b","width","height","Math","floor","random","randomColor","splice","render"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport React, {Component} from 'react'\r\nimport { Card,CardDeck } from \"react-bootstrap\";\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default class StockList extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            stocks:[],\r\n            colorArr:[\"#B22222\",\"#20B2AA\",\"#FFA500\",\"#87CEEB\",\"#483D8B\",\"#000000\",\"#556B2F\"],\r\n            datesArr:[],\r\n            valuesArr:[],\r\n            stockName:\"\",\r\n            body:[]\r\n        }\r\n    };\r\n\r\n    componentDidMount(){\r\n        axios.get('http://localhost:5000/get_all_stocks')\r\n        .then( res => {\r\n            var stocks_arr = []\r\n            Object.keys(res.data).forEach(k => {\r\n                stocks_arr.push(res.data[k])\r\n            })\r\n            this.setState({stocks:stocks_arr})\r\n        })     \r\n        this.setState({body:this.create_body()})\r\n        console.log(this.state.body[0])\r\n    }\r\n\r\n    create_body(){\r\n        var body = \"\"\r\n        return body = this.state.stocks.map( stock => {\r\n            var str = String(stock)\r\n            var responseArr = str.split(\",\")\r\n            var i = 0\r\n            var isDate = true\r\n            \r\n            for (i=0;i<responseArr.length;i++){\r\n                if (i == 0){this.setState({stockName:responseArr[i]})}\r\n                else if ( responseArr[i] === \"NowValues\" ){ isDate = false }   \r\n                else if ( isDate == true )\r\n                {\r\n                    this.setState((state) => {\r\n                        state.datesArr.push(responseArr[i])\r\n                        return {datesArr:state.datesArr} \r\n                    })\r\n                }\r\n                else if (isDate == false)\r\n                {\r\n                    this.setState((state) => {\r\n                        state.valuesArr.push(responseArr[i])\r\n                        return {valuesArr:state.valuesArr} \r\n                    })\r\n                }\r\n            }\r\n            \r\n            var i = 0\r\n            var datesArr2 = this.state.datesArr\r\n            datesArr2.forEach(date => { \r\n                var parts = String(date).split('/');\r\n                datesArr2[i] = new Date(parts[0],parts[1] - 1,parts[2]);\r\n                i++;\r\n            });\r\n            this.setState({datesArr:datesArr2})\r\n            return(\r\n                <div ><Card border=\"secondary\"><Card.Body><Card.Title style={{textAlign:\"Center\"}}><i className=\"material-icons\" style={{fontSize:\"1.5em\",position:\"absolute\",left:\"9%\",top:\"3%\"}}>edit</i>{this.state.stockName}</Card.Title><Plot\r\n                    data={[\r\n                    {\r\n                        x: this.state.datesArr,\r\n                        y: this.state.valuesArr,\r\n                        fill: \"tonexty\",\r\n                        type: 'line',\r\n                        line:{color:this.getRandomColor()}\r\n                        \r\n                    }\r\n                    ]}\r\n                    layout={ {plot_bgcolor:'#FAF0E6',margin:{l:\"30\",r :\"30\",t:\"5\",b:\"30\"},width:496,height:400}}/>\r\n                    </Card.Body></Card>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n    \r\n    getRandomColor() {\r\n        var i = Math.floor(Math.random()*this.state.colorArr.length)\r\n        var randomColor = this.state.colorArr[i];\r\n        this.setState((state) => {\r\n            state.colorArr.splice(i,1)\r\n            return {colorArr:state.colorArr}\r\n        })\r\n        return randomColor;\r\n    }\r\n    \r\n    /*create_body(){\r\n        var body = []\r\n        return body = this.state.stocks.map( stock => {\r\n            var str = String(stock)\r\n            var responseArr = str.split(\",\")\r\n            var i = 0\r\n            var isDate = true\r\n            \r\n            for (i=0;i<responseArr.length;i++){\r\n                if (i == 0){this.setState({stockName:responseArr[i]})}\r\n                else if ( responseArr[i] === \"NowValues\" ){ isDate = false }   \r\n                else if ( isDate == true )\r\n                {\r\n                    this.setState((state) => {\r\n                        state.datesArr.push(responseArr[i])\r\n                        return {datesArr:state.datesArr} \r\n                    })\r\n                }\r\n                else if (isDate == false)\r\n                {\r\n                    this.setState((state) => {\r\n                        state.valuesArr.push(responseArr[i])\r\n                        return {valuesArr:state.valuesArr} \r\n                    })\r\n                }\r\n            }\r\n            \r\n            var i = 0\r\n            var datesArr2 = this.state.datesArr\r\n            datesArr2.forEach(date => { \r\n                var parts = String(date).split('/');\r\n                datesArr2[i] = new Date(parts[0],parts[1] - 1,parts[2]);\r\n                i++;\r\n            });\r\n            this.setState({datesArr:datesArr2})\r\n            return(\r\n                <div ><Card border=\"secondary\"><Card.Body><Card.Title style={{textAlign:\"Center\"}}><i className=\"material-icons\" style={{fontSize:\"1.5em\",position:\"absolute\",left:\"9%\",top:\"3%\"}}>edit</i>{this.state.stockName}</Card.Title><Plot\r\n                    data={[\r\n                    {\r\n                        x: this.state.datesArr,\r\n                        y: this.state.valuesArr,\r\n                        fill: \"tonexty\",\r\n                        type: 'line',\r\n                        line:{color:this.getRandomColor()}\r\n                        \r\n                    }\r\n                    ]}\r\n                    layout={ {plot_bgcolor:'#FAF0E6',margin:{l:\"30\",r :\"30\",t:\"5\",b:\"30\"},width:496,height:400}}/>\r\n                    </Card.Body></Card>\r\n                </div>\r\n            )\r\n        })\r\n    }*/\r\n    \r\n    render(){\r\n        console.log(this.state.body) \r\n        return (<div><CardDeck style={{margin:\"5%\"}}>{this.state.body}</CardDeck></div>)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}