{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Rom\\\\Project\\\\app\\\\react-frontend\\\\src\\\\Components\\\\StockList.js\";\nimport axios from \"axios\";\nimport React, { Component } from 'react';\nimport { Row, Card, CardDeck } from \"react-bootstrap\";\nimport Plot from 'react-plotly.js';\nexport default class StockList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stocks: [],\n      colorArr: [\"#B22222\", \"#20B2AA\", \"#FFA500\", \"#87CEEB\", \"#483D8B\", \"#000000\", \"#556B2F\"],\n      datesArr: [],\n      valuesArr: [],\n      stockName: \"\"\n    };\n    this.create_plot = this.create_plot.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/get_all_stocks').then(res => {\n      var stocks_arr = [];\n      Object.keys(res.data).forEach(k => {\n        stocks_arr.push(res.data[k]);\n      });\n      this.setState({\n        stocks: stocks_arr\n      });\n    });\n  }\n\n  getRandomColor() {\n    var i = Math.floor(Math.random() * this.state.colorArr.length);\n    var randomColor = this.state.colorArr[i];\n    this.setState(colorArr => {\n      return colorArr.splice(i, 1);\n    });\n    return randomColor;\n  }\n\n  create_plot(stock) {\n    var str = String(stock);\n    var responseArr = str.split(\",\");\n    var i = 0;\n    var isDate = true;\n\n    for (i = 0; i < responseArr.length; i++) {\n      if (i == 0) {\n        this.setState({\n          stockName: responseArr[i]\n        });\n      } else if (responseArr[i] === \"NowValues\") {\n        isDate = false;\n      } else if (isDate == true) {\n        this.setState(state => {\n          state.datesArr.push(responseArr[i]);\n          return {\n            datesArr: state.datesArr\n          };\n        });\n      } else if (isDate == false) {\n        this.setState(valuesArr => {\n          return valuesArr.push(responseArr[i]);\n        });\n      }\n    }\n\n    var i = 0;\n    var datesArr2 = this.state.datesArr;\n    this.state.datesArr.forEach(date => {\n      var parts = date.split('/');\n      datesArr2[i] = new Date(parts[0], parts[1] - 1, parts[2]);\n      i++;\n    });\n    this.setState({\n      datesArr: datesArr2\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      border: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 44\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      style: {\n        textAlign: \"Center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 55\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"material-icons\",\n      style: {\n        fontSize: \"1.5em\",\n        position: \"absolute\",\n        left: \"9%\",\n        top: \"3%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 96\n      }\n    }, \"edit\"), this.state.stockName), /*#__PURE__*/React.createElement(Plot, {\n      data: [{\n        x: this.state.datesArr,\n        y: this.state.valuesArr,\n        fill: \"tonexty\",\n        type: 'line',\n        line: {\n          color: this.getRandomColor()\n        }\n      }],\n      layout: {\n        plot_bgcolor: '#FAF0E6',\n        margin: {\n          l: \"30\",\n          r: \"30\",\n          t: \"5\",\n          b: \"30\"\n        },\n        width: 496,\n        height: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 235\n      }\n    }))));\n  }\n\n  render() {\n    var body = [];\n    this.state.stocks.forEach(stock => {\n      body.push(this.create_plot(stock));\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardDeck, {\n      style: {\n        margin: \"5%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 22\n      }\n    }, body));\n  }\n\n}","map":{"version":3,"sources":["C:/Program Files/Rom/Project/app/react-frontend/src/Components/StockList.js"],"names":["axios","React","Component","Row","Card","CardDeck","Plot","StockList","constructor","state","stocks","colorArr","datesArr","valuesArr","stockName","create_plot","bind","componentDidMount","get","then","res","stocks_arr","Object","keys","data","forEach","k","push","setState","getRandomColor","i","Math","floor","random","length","randomColor","splice","stock","str","String","responseArr","split","isDate","datesArr2","date","parts","Date","textAlign","fontSize","position","left","top","x","y","fill","type","line","color","plot_bgcolor","margin","l","r","t","b","width","height","render","body"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport React, {Component} from 'react'\r\nimport { Row,Card,CardDeck } from \"react-bootstrap\";\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default class StockList extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            stocks:[],\r\n            colorArr:[\"#B22222\",\"#20B2AA\",\"#FFA500\",\"#87CEEB\",\"#483D8B\",\"#000000\",\"#556B2F\"],\r\n            datesArr:[],\r\n            valuesArr:[],\r\n            stockName:\"\"\r\n        }\r\n        this.create_plot = this.create_plot.bind(this)\r\n    };\r\n\r\n    componentDidMount(){\r\n        axios.get('http://localhost:5000/get_all_stocks')\r\n        .then( res => {\r\n            var stocks_arr = []\r\n            Object.keys(res.data).forEach(k => {\r\n                stocks_arr.push(res.data[k])\r\n            })\r\n            this.setState({stocks:stocks_arr})\r\n        } )\r\n    }\r\n    \r\n    getRandomColor() {\r\n        var i = Math.floor(Math.random()*this.state.colorArr.length)\r\n        var randomColor = this.state.colorArr[i];\r\n        this.setState((colorArr) => {return (colorArr.splice(i,1))})\r\n        return randomColor;\r\n    }\r\n    \r\n    create_plot(stock){\r\n        var str = String(stock)\r\n        var responseArr = str.split(\",\")\r\n        var i = 0\r\n        var isDate = true\r\n        for (i=0;i<responseArr.length;i++){\r\n            if (i == 0){this.setState({stockName:responseArr[i]})}\r\n            else if ( responseArr[i] === \"NowValues\" ){ isDate = false }   \r\n            else if ( isDate == true )\r\n            {\r\n                this.setState((state) => {\r\n                    state.datesArr.push(responseArr[i])\r\n                    return {datesArr:state.datesArr} \r\n                })\r\n            }\r\n            else if (isDate == false){ this.setState((valuesArr) => {return (valuesArr.push(responseArr[i]) )}) }\r\n        }\r\n        \r\n        var i = 0\r\n        var datesArr2 = this.state.datesArr\r\n        this.state.datesArr.forEach(date => { \r\n            var parts = date.split('/');\r\n            datesArr2[i] = new Date(parts[0],parts[1] - 1,parts[2]);\r\n            i++;\r\n        });\r\n        this.setState({datesArr:datesArr2})\r\n        return(\r\n            <div ><Card border=\"secondary\"><Card.Body><Card.Title style={{textAlign:\"Center\"}}><i className=\"material-icons\" style={{fontSize:\"1.5em\",position:\"absolute\",left:\"9%\",top:\"3%\"}}>edit</i>{this.state.stockName}</Card.Title><Plot\r\n                data={[\r\n                {\r\n                    x: this.state.datesArr,\r\n                    y: this.state.valuesArr,\r\n                    fill: \"tonexty\",\r\n                    type: 'line',\r\n                    line:{color:this.getRandomColor()}\r\n                    \r\n                }\r\n                ]}\r\n                layout={ {plot_bgcolor:'#FAF0E6',margin:{l:\"30\",r :\"30\",t:\"5\",b:\"30\"},width:496,height:400}}/>\r\n                </Card.Body></Card>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    render(){ \r\n        var body = []\r\n        this.state.stocks.forEach(stock => {\r\n            body.push(this.create_plot(stock))\r\n        });\r\n        return (<div><CardDeck style={{margin:\"5%\"}}>{body}</CardDeck></div>)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}