{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Rom\\\\Project\\\\app\\\\react-frontend\\\\src\\\\Components\\\\IndexList.js\";\nimport axios from \"axios\";\nimport React, { Component } from 'react';\nimport { Card, CardDeck } from \"react-bootstrap\";\nimport Plot from 'react-plotly.js';\nimport AOS from 'aos';\nimport 'aos/dist/aos.css';\nAOS.init();\nexport default class IndexList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      indices: []\n    };\n  }\n\n  //Pushing response indices (as strings) to this.state.indices, then calling a function to parse and arrange everything\n  componentDidMount() {\n    axios.get('http://localhost:5000/get_all_indices').then(res => {\n      var indices_arr = [];\n      Object.keys(res.data).forEach(k => {\n        indices_arr.push({\n          data: res.data[k]\n        });\n      });\n      this.setState({\n        indices: indices_arr\n      });\n      this.update_state();\n    });\n  } //This function is using my response from backend in order to update all state values\n\n\n  update_state() {\n    this.setState(state => {\n      //this is the final array, which this.state.indices will be equal to.\n      var indicesArr = []; //Looping over the strings in order to parse them\n\n      state.indices.forEach(index => {\n        var datesArr = [];\n        var valuesArr = [];\n        var indexName = \"\";\n        var str = String(index.data);\n        var responseArr = str.split(\",\");\n        var isDate = true; //Looping over and Fetching data from responseArr, manipulates it, and updates datesArr,valuesArr and indexName \n\n        for (var i = 0; i < responseArr.length; i++) {\n          if (i == 0) {\n            indexName = responseArr[i];\n          } else if (responseArr[i] === \"NowValues\") {\n            isDate = false;\n          } else if (isDate == true) {\n            var parts = String(responseArr[i]).split('/');\n            var date = new Date(parts[0], parts[1] - 1, parts[2]);\n            datesArr.push(date);\n          } else if (isDate == false) {\n            valuesArr.push(responseArr[i]);\n          }\n        } //pushing each index's details to indicesArr\n\n\n        indicesArr.push({\n          \"datesArr\": datesArr,\n          \"valuesArr\": valuesArr,\n          \"indexName\": indexName\n        });\n      }); //returning new state \n\n      return {\n        indices: indicesArr\n      };\n    });\n  }\n\n  create_body() {\n    var body = \"\";\n    var colorArr = [\"#B22222\", \"#20B2AA\", \"#FFA500\", \"#87CEEB\", \"#483D8B\", \"#000000\", \"#556B2F\"];\n    var zoomSide = \"fade-left\"; //Looping over this.state.indices, creating and returning the Plots' HTML\n\n    return body = this.state.indices.map(index => {\n      if (zoomSide === \"fade-right\") {\n        zoomSide = \"fade-left\";\n      } else {\n        zoomSide = \"fade-right\";\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-aos\": zoomSide,\n        \"data-aos-duration\": \"1500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        border: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 67\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        style: {\n          textAlign: \"Center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"material-icons\",\n        style: {\n          fontSize: \"1.5em\",\n          position: \"absolute\",\n          left: \"9%\",\n          top: \"3%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 66\n        }\n      }, \"edit\"), index.indexName), /*#__PURE__*/React.createElement(Plot, {\n        data: [{\n          x: index.datesArr,\n          y: index.valuesArr,\n          fill: \"tonexty\",\n          type: 'line',\n          line: {\n            color: this.getRandomColor(colorArr)\n          }\n        }],\n        layout: {\n          plot_bgcolor: '#FAF0E6',\n          margin: {\n            l: \"30\",\n            r: \"30\",\n            t: \"5\",\n            b: \"30\"\n          },\n          width: 496,\n          height: 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }\n      }))));\n    });\n  } //Fetches a color from the color array and then poping the color out of it\n\n\n  getRandomColor(colorArr) {\n    var i = Math.floor(Math.random() * colorArr.length);\n    var randomColor = colorArr[i];\n    colorArr.splice(i, 1);\n    return randomColor;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      \"data-aos\": \"zoom-in\",\n      \"data-aos-duration\": \"1000\",\n      style: {\n        textAlign: \"center\",\n        fontWeight: \"550\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, \"indices\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-aos\": \"zoom-in-up\",\n      \"data-aos-duration\": \"2000\",\n      className: \"text-muted\",\n      style: {\n        textAlign: \"center\",\n        fontStyle: \"oblique\",\n        fontWeight: \"lighter\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, \"Your money, our pleasure.\"), /*#__PURE__*/React.createElement(CardDeck, {\n      style: {\n        margin: \"5%\",\n        marginTop: \"3%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, this.create_body()));\n  }\n\n}","map":{"version":3,"sources":["C:/Program Files/Rom/Project/app/react-frontend/src/Components/IndexList.js"],"names":["axios","React","Component","Card","CardDeck","Plot","AOS","init","IndexList","constructor","state","indices","componentDidMount","get","then","res","indices_arr","Object","keys","data","forEach","k","push","setState","update_state","indicesArr","index","datesArr","valuesArr","indexName","str","String","responseArr","split","isDate","i","length","parts","date","Date","create_body","body","colorArr","zoomSide","map","textAlign","fontSize","position","left","top","x","y","fill","type","line","color","getRandomColor","plot_bgcolor","margin","l","r","t","b","width","height","Math","floor","random","randomColor","splice","render","fontWeight","fontStyle","marginTop"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport React, {Component} from 'react'\r\nimport { Card,CardDeck } from \"react-bootstrap\";\r\nimport Plot from 'react-plotly.js';\r\nimport AOS from 'aos';\r\nimport 'aos/dist/aos.css'\r\nAOS.init();\r\n\r\nexport default class IndexList extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            indices:[]\r\n        }\r\n    };\r\n\r\n    //Pushing response indices (as strings) to this.state.indices, then calling a function to parse and arrange everything\r\n    componentDidMount(){\r\n        axios.get('http://localhost:5000/get_all_indices')\r\n        .then( res => {\r\n            var indices_arr = []\r\n            Object.keys(res.data).forEach(k => {\r\n                indices_arr.push({data:res.data[k]})\r\n            })\r\n            this.setState({indices:indices_arr})\r\n            this.update_state()\r\n        })       \r\n    }\r\n\r\n    //This function is using my response from backend in order to update all state values\r\n    update_state(){\r\n        this.setState(state => {  \r\n            \r\n            //this is the final array, which this.state.indices will be equal to.\r\n            var indicesArr = []\r\n            \r\n            //Looping over the strings in order to parse them\r\n            state.indices.forEach( index => {\r\n                var datesArr = []\r\n                var valuesArr = []\r\n                var indexName = \"\"\r\n                \r\n                var str = String(index.data)\r\n                var responseArr = str.split(\",\")\r\n                var isDate = true\r\n                \r\n                //Looping over and Fetching data from responseArr, manipulates it, and updates datesArr,valuesArr and indexName \r\n                for (var i=0;i<responseArr.length;i++){\r\n                    if (i == 0){indexName = responseArr[i]}\r\n                    else if ( responseArr[i] === \"NowValues\" ){ isDate = false }   \r\n                    else if ( isDate == true )\r\n                    {\r\n                        var parts = String(responseArr[i]).split('/');\r\n                        var date = new Date(parts[0],parts[1] - 1,parts[2]);\r\n                        datesArr.push(date)\r\n                    }\r\n                    else if (isDate == false)\r\n                    { \r\n                        valuesArr.push(responseArr[i])\r\n                    }\r\n                }\r\n                //pushing each index's details to indicesArr\r\n                indicesArr.push({\"datesArr\":datesArr,\"valuesArr\":valuesArr,\"indexName\":indexName})\r\n            })\r\n            //returning new state \r\n            return {indices:indicesArr}\r\n        })\r\n    }\r\n    \r\n    create_body(){\r\n        var body = \"\"\r\n        var colorArr = [\"#B22222\",\"#20B2AA\",\"#FFA500\",\"#87CEEB\",\"#483D8B\",\"#000000\",\"#556B2F\"]\r\n        var zoomSide = \"fade-left\"\r\n        //Looping over this.state.indices, creating and returning the Plots' HTML\r\n        return body = this.state.indices.map( index => {\r\n            if (zoomSide === \"fade-right\") {zoomSide=\"fade-left\"} else {zoomSide=\"fade-right\"}\r\n            return(\r\n                <div data-aos={zoomSide} data-aos-duration=\"1500\"><Card border=\"secondary\">\r\n                    <Card.Body>\r\n                        <Card.Title style={{textAlign:\"Center\"}}><i className=\"material-icons\" style={{fontSize:\"1.5em\",position:\"absolute\",left:\"9%\",top:\"3%\"}}>edit</i>{index.indexName}</Card.Title>\r\n                        <Plot\r\n                            data={[\r\n                            {\r\n                                x: index.datesArr,\r\n                                y: index.valuesArr,\r\n                                fill: \"tonexty\",\r\n                                type: 'line',\r\n                                line:{color:this.getRandomColor(colorArr)}    \r\n                            }\r\n                            ]}\r\n                            layout={ {plot_bgcolor:'#FAF0E6',margin:{l:\"30\",r :\"30\",t:\"5\",b:\"30\"},width:496,height:400}}/>\r\n                    </Card.Body>   \r\n                </Card></div>\r\n            )\r\n        })\r\n    }\r\n    //Fetches a color from the color array and then poping the color out of it\r\n    getRandomColor(colorArr) {\r\n        var i = Math.floor(Math.random()*colorArr.length)\r\n        var randomColor = colorArr[i];\r\n        colorArr.splice(i,1)\r\n        return randomColor;\r\n    }\r\n\r\n    render(){ \r\n        return (<div>\r\n                    <h1 data-aos=\"zoom-in\" data-aos-duration=\"1000\" style={{textAlign:\"center\",fontWeight:\"550\"}}>indices</h1>\r\n                    <br/>\r\n                    <h3 data-aos=\"zoom-in-up\" data-aos-duration=\"2000\" className=\"text-muted\" style={{textAlign:\"center\",fontStyle:\"oblique\",fontWeight:\"lighter\"}}>Your money, our pleasure.</h3>\r\n                    <CardDeck style={{margin:\"5%\",marginTop:\"3%\"}}>{this.create_body()}</CardDeck>\r\n                </div>)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}