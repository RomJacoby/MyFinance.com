pipeline {
    environment {
        image_name = "myfinance_frontend:${env.BUILD_ID}"
        container_id = ""
        dockerfile = "./app/react-frontend/Dockerfile-Frontend"
        dockerfile_context = "./app/react-frontend/"
        abort = false
    }
    
    agent any
    
    stages {
        stage ('Build Dev image for test') {
            when {
                allOf {
                      branch 'feature'
                      expression {abort != true}
                }  
            } 
            steps {
                script {
                    docker.build("${image_name}", "-f ${dockerfile} ${dockerfile_context}")
                    output = sh(script:"docker images ${image_name}",returnStdout:true)
                    image_built = output.contains("myfinance_frontend")
                    if (image_built == false)
                    {
                        echo 'Could not build Frontend image, ABORT pipeline'
                        abort = true
                        currentBuild.result = 'ABORTED'
                        error('Aborting...')
                    }
                }
            }
        }
        stage ('Test') {
            when {
	            allOf {
                    branch 'feature'
                    expression {abort != true}
                }  
	        }
            steps {
                container_id = sh(script:"docker run -d --rm -p 101:80 ${image_name}",returnStdout:true)
                container_status = sh(script:"docker inspect ${container_id}",returnStdout:true)
                if (container_status.contains("running"))
                {
                    sleep(7)
                    ip_address = sh(script: "curl -H "Metadata-Flavor: Google" http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip",returnStdout:true)
                    echo "Please enter the website http://${ip_address}:101 and test it"
                    input("After the tests, pick if you want to PROCEED or ABORT the pipeline")
                }
                else 
                {
                    echo "Container failed to run, ABORT pipeline"
                    abort = true
                    currentBuild.result = 'ABORTED'
                    error('Aborting...')
                }
            }    
        }
        stage ('Push to master') {
            when {
	            allOf {
                    branch 'feature'
                    expression {abort != true}
                }  
	        }
            steps{
                withCredentials([usernamePassword(credentialsId: 'b09400db-9f0b-4de4-bb24-1f06515eb59a', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            sh 'git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/RomJacoby/MyFinance.com HEAD:master'
                }
            }
        }
        stage('Build image for deploy') {
            when {
                branch 'master'
            }
            steps {
                echo 'Building for deploy'
            }
        }
        stage('Deploy') {
            when {
                branch 'master'
            }
            steps {
                echo 'Deploying....'
            }
        }
        //add cleanup
    }
    post {
        always{
            script{
               if (env.BRANCH_NAME == 'feature')
               {
                   sh "docker kill ${container_id}"
                   sh "docker rmi -f ${image_name}"
               }
            }
        }
    }
    }
}